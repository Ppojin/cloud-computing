docker exec -it manager docker service create --replicas 1 --publish 8000:8080 --name echo registry:5000/example/echo:latest

* Docker 기동 (registry x 1, manager x 1, worker x 3)
docker-compose up -d 
docker contianer ls 

* Docker Swarm 설정 (manger x 1, worker01 ~ worker03)
docker exec -it manager docker swarm init
docker exec -it worker03 docker swarm join \
    --token SWMTKN-1-4u47j97bpwybwl2n7jahfm3is0vykb0wn6y5ci48hirfy415yg-ek0yes7rkyq1mtzo6jvrnzbo0 manager:2377

* Registry에 이미지 등록(push), 각 Worker에서 설치(pull)
docker tag example/echo:latest localhost:5000/example/echo:latest
docker push localhost:5000/example/echo:latest
docker exec -it worker01 docker pull localhost:5000/example/echo:latest
docker exec -it worker01 docker image ls

* service (어플리케이션을 구성하는 컨테이너들을 관리)
docker exec -it manager \
    docker service create --replicas 1 --publish 8000:8080 --name echo registry:5000/example/echo:latest
docker exec -it manager docker service ls
docker exec -it manager docker service scale echo=6
docker exec -it manager docker service ps echo | grep Running
docker exec -it manager docker service rm echo 

* stack (하나 이상의 서비스를 그룹으로 묶은 단위, 어플리케이션 전체 구성, 여러 서비스를 다룰 수 있음)
docker exec -it manager docker network craete --driver=overlay --attachable ch03 
(/stack/ch03-webapi.yml)
docker exec -it manager docker stack deploy -c /statck/ch03-webapi.yml echo
docker exec -it manager docker stack services echo (스택 확인)
docker exec -it manager docker stack ps echo (스택에 배포된 컨테이너 확인)
docker exec -it manager docker stack rm echo

* visualizer 
docker exec -it manager docker stack deploy -c /stack/visualizer.yml visualizer

* 외부 서비스를 위한 HAProxy (ch03-ingress.yml)
-> ch03-webapi.yml 파일에 SERVICE_PORTS:80 추가 -> 스택에 다시 배포 
docker exec -it manager docker statck deploy -c /stack/ch03-ingress.yml ingress
docker exec -it manager docker service ls
-> curl http://localhost:8000


 *　
 docker exec -it manager docker service ps todo_mysql_master --no-trunc --filter "desired-state=running" n--format "docker exec -it {{.Node}} docker exec -it {{.Name}}.{{.ID}} bash"
 docker exec -it manager docker service ps todo_mysql_slave --no-trunc --filter "desired-state=running" --format "docker exec -it {{.Node}} docker exec -it {{.Name}}.{{.ID}} bash"

 docker exec -it manager docker service ps todo_frontend_web --no-trunc --filter "desired-state=running" --format "docker exec -it {{.Node}} docker exec -it {{.Name}}.{{.ID}} bash"

 * 
 sudo npm cache clean -f
 sudo npm install -g n
 sudo n 9.2.0

 * 스웜에서 MySQL 컨테이너 확인 및 초기 데이터 투입 
docker exec -it manager docker service ps todo_mysql_master --no-trunc --filter "desired-state=running"
docker exec -it [Node Container ID] \
    docker exec -it todo_mysql_master.1.[Service ID] bash
-> 번거롭기 때문에, 
 * 스웜에서 MySQL 컨테이너 확인 및 초기 데이터 투입 
docker exec -it manager docker service ps todo_mysql_master --no-trunc --filter "desired-state=running" \
    -- format "docker exec -it {{.Node}} docker exec -it {{.Name}}.{{.ID}} bash"

 * master 컨테이너에서 init-data.sh 스크립트 실행 -> 테이블 및 데이터 초기화
 docker exec -it [Container ID] docker exec -it todo_mysql_master.1.[Service ID] init-data.sh
 docker exec -it [Container ID] docker exec -it todo_mysql_master.1.[Service ID] mysql -ugihyo -pgihyo tododb

 * Slave에 Master의 데이터 반영되었는지 확인
 docker exec -it manager docker service ps todo_mysql_slave --no-trunc --filter "desired-state=running" \
    --format "docker exec -it {{.Node}} docker exec -it {{.Name}}.{{.ID}} bash"
docker exec -it [Container ID] docker exec -it todo_mysql_slave.1.[Service ID] bash
docker exec -it [Container ID] docker exec -it todo_mysql_slave.2.[Service ID] bash